# Файл для проверки совместимости модели и весов, сделанных в colab и
# локальной версии Tensorflow

from keras import models
import numpy as np
import os
import tensorflow as tf # TensorFlow

# Грузим модель на старте
checkpoint_path = "/Users/lebedev/PycharmProjects/ObjectDetection/fingers.weights.h5"
model_path = '/Users/lebedev/PycharmProjects/ObjectDetection/fingers-mode.h5'

# Проверьте, что файл модели существует
if not os.path.exists(model_path):
    raise FileNotFoundError(f"Model file not found: {model_path}")

# Загружаем модель
model = models.load_model(model_path)

test = [0.21253778040409088, 0.9640916585922241, 4.567231428609375e-07, 0.2818228602409363, 0.9106161594390869, -0.02594088204205036, 0.33540090918540955, 0.8054007291793823, -0.04022127017378807, 0.3705020546913147, 0.7226907014846802, -0.05486515536904335, 0.40170198678970337, 0.6726011037826538, -0.070256806910038, 0.2872176766395569, 0.6089024543762207, -0.02753739058971405, 0.314929723739624, 0.48650798201560974, -0.05602743476629257, 0.33392590284347534, 0.4117565155029297, -0.07997169345617294, 0.34889212250709534, 0.3475704789161682, -0.09740660339593887, 0.23144708573818207, 0.5878211259841919, -0.036964301019907, 0.2357398420572281, 0.4221270680427551, -0.06376127153635025, 0.243406742811203, 0.3249363601207733, -0.08601805567741394, 0.24897746741771698, 0.24311286211013794, -0.10183466225862503, 0.17873862385749817, 0.6089059114456177, -0.05032173916697502, 0.1636132299900055, 0.45212820172309875, -0.07832001149654388, 0.1589341014623642, 0.35171499848365784, -0.09877533465623856, 0.15675625205039978, 0.2639157176017761, -0.11213704943656921, 0.12909097969532013, 0.6664525866508484, -0.06606229394674301, 0.10319095849990845, 0.5434390306472778, -0.09314676374197006, 0.08645762503147125, 0.4638587236404419, -0.1059737503528595, 0.0739130973815918, 0.38712307810783386, -0.11366613209247589]

test = np.asarray(test)
# print (test.shape())
test = test.reshape(1, -1)

test =tf.convert_to_tensor(test, dtype=tf.float32)
#test = tf.expand_dims(test, axis=0)


coord = np.zeros((1, 63))
coord=tf.convert_to_tensor(coord, dtype=tf.float32)
prediction = model.predict(test)
prediction
print(prediction)
print(np.max(prediction))
